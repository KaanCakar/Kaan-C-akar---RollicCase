using UnityEngine;
using UnityEngine.UI;
using TMPro;

/// <summary>
/// Kaan √áakar 2025 - TimerUI.cs
/// Simplified timer display - only text and fill bar
/// </summary>
public class TimerUI : MonoBehaviour
{
    [Header("UI References")]
    public TextMeshProUGUI timerText;
    public Image timerFillBar; // Progress bar

    // Internal state
    private float currentTime = 0f;
    private float totalTime = 0f;
    private bool isActive = false;
    private TimerDisplayFormat displayFormat = TimerDisplayFormat.MinutesSeconds;
    
    public static TimerUI Instance { get; private set; }
    
    // Events
    public System.Action OnTimerFinished;
    
    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else
        {
            Destroy(gameObject);
        }
    }
    
    void Start()
    {
        // UI component'lerini otomatik bul
        if (timerText == null)
            timerText = GetComponentInChildren<TextMeshProUGUI>();
        
        // Ba≈ülangƒ±√ßta GameManager'dan ayarlarƒ± al ama ba≈ülatma
        InitializeFromGameManager();
    }
    
    /// <summary>
    /// GameManager'dan timer ayarlarƒ±nƒ± al ve g√∂ster
    /// </summary>
    void InitializeFromGameManager()
    {
        if (GameManager.Instance != null)
        {
            var levelData = GameManager.Instance.currentLevelData;
            if (levelData != null && levelData.timerEnabled)
            {
                // Timer'ƒ± ayarla ama ba≈ülatma
                totalTime = levelData.levelTimeInSeconds;
                currentTime = levelData.levelTimeInSeconds;
                displayFormat = levelData.timerFormat;
                isActive = false; // ‚úÖ Hen√ºz ba≈ülatma
                
                SetVisible(true);
                UpdateDisplay();
                
                Debug.Log($"üïê Timer initialized: {totalTime}s (waiting for first click)");
            }
            else
            {
                // Timer disabled - gizle
                SetVisible(false);
                Debug.Log("üö´ Timer disabled - UI hidden");
            }
        }
        else
        {
            // GameManager yok - default g√∂r√ºn√ºm√º g√∂ster
            totalTime = 60f;
            currentTime = 60f;
            displayFormat = TimerDisplayFormat.MinutesSeconds;
            isActive = false; // ‚úÖ Ba≈ülatma
            
            SetVisible(true);
            UpdateDisplay();
            
            Debug.Log("‚ö†Ô∏è GameManager not found - showing default timer");
        }
    }
    
    void Update()
    {
        // ‚úÖ Sadece aktifse countdown yap
        if (isActive && currentTime > 0)
        {
            currentTime -= Time.deltaTime;
            
            // Timer bitti mi kontrol et
            if (currentTime <= 0)
            {
                currentTime = 0;
                FinishTimer();
            }
            
            UpdateDisplay();
        }
    }
    
    #region Public API
    
    /// <summary>
    /// Timer'ƒ± ba≈ülat (ilk person tƒ±klamasƒ±nda √ßaƒürƒ±lacak)
    /// </summary>
    public void StartTimer()
    {
        if (!isActive) // Sadece ilk kez ba≈ülatƒ±lacak
        {
            isActive = true;
            Debug.Log($"üïê Timer STARTED: {currentTime}s");
        }
    }
    
    /// <summary>
    /// Timer'ƒ± g√ºncelle (Tool'dan √ßaƒürƒ±lacak)
    /// </summary>
    public void UpdateTimerSettings(float timeInSeconds, TimerDisplayFormat format, bool enabled)
    {
        if (enabled)
        {
            totalTime = timeInSeconds;
            currentTime = timeInSeconds;
            displayFormat = format;
            isActive = false; // ‚úÖ Reset - sadece g√ºncelle, ba≈ülatma
            
            SetVisible(true);
            UpdateDisplay();
            
            Debug.Log($"üîÑ Timer settings updated: {timeInSeconds}s, Format: {format}");
        }
        else
        {
            SetVisible(false);
            Debug.Log("üö´ Timer disabled");
        }
    }
    
    /// <summary>
    /// Timer'ƒ± durdur
    /// </summary>
    public void StopTimer()
    {
        isActive = false;
        Debug.Log("üõë Timer stopped");
    }
    
    /// <summary>
    /// Timer'ƒ± pause et
    /// </summary>
    public void PauseTimer()
    {
        isActive = false;
        Debug.Log("‚è∏Ô∏è Timer paused");
    }
    
    /// <summary>
    /// Timer'ƒ± resume et
    /// </summary>
    public void ResumeTimer()
    {
        isActive = true;
        Debug.Log("‚ñ∂Ô∏è Timer resumed");
    }
    
    /// <summary>
    /// Timer'ƒ± gizle/g√∂ster
    /// </summary>
    public void SetVisible(bool visible)
    {
        gameObject.SetActive(visible);
    }
    
    /// <summary>
    /// Kalan s√ºreyi al
    /// </summary>
    public float GetRemainingTime()
    {
        return currentTime;
    }
    
    /// <summary>
    /// Timer aktif mi?
    /// </summary>
    public bool IsActive()
    {
        return isActive;
    }
    
    #endregion
    
    #region Display Updates
    
    void UpdateDisplay()
    {
        // Text g√ºncelle
        if (timerText != null)
        {
            string timeString = FormatTime(currentTime, displayFormat);
            timerText.text = timeString;
        }
        
        // ‚úÖ Fill bar g√ºncelle (sadece bu kalacak)
        if (timerFillBar != null)
        {
            float fillAmount = totalTime > 0 ? currentTime / totalTime : 0f;
            timerFillBar.fillAmount = fillAmount;
        }
    }
    
    string FormatTime(float timeInSeconds, TimerDisplayFormat format)
    {
        int totalSeconds = Mathf.CeilToInt(timeInSeconds);
        int minutes = totalSeconds / 60;
        int seconds = totalSeconds % 60;
        int milliseconds = Mathf.FloorToInt((timeInSeconds - Mathf.FloorToInt(timeInSeconds)) * 100);
        
        switch (format)
        {
            case TimerDisplayFormat.SecondsOnly:
                return totalSeconds.ToString();
                
            case TimerDisplayFormat.MinutesSeconds:
                return $"{minutes}:{seconds:00}";
                
            case TimerDisplayFormat.MinutesSecondsMs:
                return $"{minutes}:{seconds:00}:{milliseconds:00}";
                
            default:
                return $"{minutes}:{seconds:00}";
        }
    }
    
    #endregion
    
    void FinishTimer()
    {
        isActive = false;
        OnTimerFinished?.Invoke();
        
        Debug.Log("‚è∞ Timer FINISHED!");
        
        // GameManager'a timer bittiƒüini bildir
        if (GameManager.Instance != null)
        {
            GameManager.Instance.LoseGame("Time's up!");
        }
    }
    
    #region Debug
    
    [ContextMenu("Test Timer 10s")]
    void TestTimer10()
    {
        totalTime = 10f;
        currentTime = 10f;
        displayFormat = TimerDisplayFormat.MinutesSeconds;
        isActive = false;
        UpdateDisplay();
        Debug.Log("Timer set to 10s - click StartTimer() to begin");
    }
    
    [ContextMenu("Start Timer Now")]
    void StartTimerNow()
    {
        StartTimer();
    }
    
    #endregion
}